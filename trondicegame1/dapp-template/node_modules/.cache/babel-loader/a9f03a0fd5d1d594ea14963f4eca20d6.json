{"ast":null,"code":"import _regeneratorRuntime from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/src/components/App/index.js\";\nimport React from 'react';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\nimport './App.scss';\nvar FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      balance: 0,\n      getbalanceaddress: '',\n      transferaddress: '',\n      transferamount: '',\n      contractAddress: '',\n      tokenname: '',\n      tokensymbol: '',\n      tronwebaddress: '',\n      totalSupply: '',\n      burnamount: '',\n      tronWeb: {\n        installed: false,\n        loggedIn: false\n      }\n    };\n    _this.updateGetBalanceInputValue = _this.updateGetBalanceInputValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateTransferInputValue = _this.updateTransferInputValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateTransferAmountInputValue = _this.updateTransferAmountInputValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateContractAddressInput = _this.updateContractAddressInput.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setState({\n                  loading: true\n                });\n                _context.next = 3;\n                return new Promise(function (resolve) {\n                  var tronWebState = {\n                    installed: !!window.tronWeb,\n                    loggedIn: window.tronWeb && window.tronWeb.ready\n                  };\n\n                  if (tronWebState.installed) {\n                    _this2.setState({\n                      tronWeb: tronWebState\n                    });\n\n                    return resolve();\n                  }\n\n                  var tries = 0;\n                  var timer = setInterval(function () {\n                    if (tries >= 10) {\n                      var TRONGRID_API = 'https://api.trongrid.io';\n                      window.tronWeb = new TronWeb(TRONGRID_API, TRONGRID_API, TRONGRID_API);\n\n                      _this2.setState({\n                        tronWeb: {\n                          installed: false,\n                          loggedIn: false\n                        }\n                      });\n\n                      clearInterval(timer);\n                      return resolve();\n                    }\n\n                    tronWebState.installed = !!window.tronWeb;\n                    tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n                    if (!tronWebState.installed) return tries++;\n\n                    _this2.setState({\n                      tronWeb: tronWebState\n                    });\n\n                    resolve();\n                  }, 100);\n                });\n\n              case 3:\n                if (!this.state.tronWeb.loggedIn) {\n                  // Set default address (foundation address) used for contract calls\n                  // Directly overwrites the address object as TronLink disabled the\n                  // function call\n                  window.tronWeb.defaultAddress = {\n                    hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                    base58: FOUNDATION_ADDRESS\n                  };\n                  window.tronWeb.on('addressChanged', function () {\n                    if (_this2.state.tronWeb.loggedIn) return;\n\n                    _this2.setState({\n                      tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                      }\n                    });\n                  });\n                } //await Utils.setTronWeb(window.tronWeb);\n                //console.log(Utils.tronWeb.address.fromHex((((await Utils.tronWeb.trx.getAccount()).address).toString())));  /////// Get account address and info\n                // console.log(await Utils.tronWeb.trx.getBalance());\n\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }() ///////////////////////////////// DYNAMIC CONTRACT ADDRESS /////////////////////////\n\n  }, {\n    key: \"updateContractAddressInput\",\n    value: function () {\n      var _updateContractAddressInput = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(evt) {\n        var tmp_tronwebaddress;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.setState({\n                  contractAddress: evt.target.value\n                });\n\n              case 2:\n                console.log('contractAddress : ', this.state.contractAddress);\n                _context2.next = 5;\n                return Utils.setTronWeb(window.tronWeb, this.state.contractAddress);\n\n              case 5:\n                _context2.t0 = Utils.tronWeb.address;\n                _context2.next = 8;\n                return Utils.tronWeb.trx.getAccount();\n\n              case 8:\n                _context2.t1 = _context2.sent.address.toString();\n                tmp_tronwebaddress = _context2.t0.fromHex.call(_context2.t0, _context2.t1);\n                _context2.t2 = this;\n                _context2.next = 13;\n                return Utils.contract.name().call();\n\n              case 13:\n                _context2.t3 = _context2.sent;\n                _context2.next = 16;\n                return Utils.contract.symbol().call();\n\n              case 16:\n                _context2.t4 = _context2.sent;\n                _context2.next = 19;\n                return Utils.contract.totalSupply().call();\n\n              case 19:\n                _context2.t5 = _context2.sent.toNumber();\n                _context2.t6 = _context2.t5 / 100000000;\n                _context2.t7 = tmp_tronwebaddress;\n                _context2.t8 = {\n                  tokenname: _context2.t3,\n                  tokensymbol: _context2.t4,\n                  totalSupply: _context2.t6,\n                  tronwebaddress: _context2.t7\n                };\n                _context2.next = 25;\n                return _context2.t2.setState.call(_context2.t2, _context2.t8);\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function updateContractAddressInput(_x) {\n        return _updateContractAddressInput.apply(this, arguments);\n      };\n    }() ///////////////////////////////// DYNAMIC CONTRACT ADDRESS END /////////////////////////\n    /////////////////////////////////////// GET BALANCE /////////////////////////////////\n\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_getbalanceaddress) {\n        var balance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Utils.contract.balanceOf(_getbalanceaddress).call();\n\n              case 2:\n                _context3.t0 = _context3.sent.toNumber();\n                balance = _context3.t0 / 100000000;\n                //const balance = await Utils.contract.decimals().call();\n                console.log('balance', balance);\n                this.setState({\n                  balance: balance\n                });\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function getBalance(_x2) {\n        return _getBalance.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"updateGetBalanceInputValue\",\n    value: function updateGetBalanceInputValue(evt) {\n      console.log('getbalanceaddress : ', this.state.getbalanceaddress);\n      this.setState({\n        getbalanceaddress: evt.target.value\n      });\n    } /////////////////////////////////////// GET BALANCE END /////////////////////////////////\n    /////////////////////////////////// TRANSFER /////////////////////////////\n\n  }, {\n    key: \"Transfer\",\n    value: function Transfer(_to, _amount) {\n      Utils.contract.transfer(_to, _amount).send({\n        shouldPollResponse: true,\n        callValue: 0\n      }).then(function (res) {\n        return Swal({\n          title: 'Transfer Successful',\n          type: 'success'\n        });\n      }).catch(function (err) {\n        return Swal({\n          title: 'Transfer Failed',\n          type: 'error'\n        });\n      });\n    }\n  }, {\n    key: \"updateTransferInputValue\",\n    value: function updateTransferInputValue(evt) {\n      this.setState({\n        transferaddress: evt.target.value\n      });\n      console.log('transferaddress : ', this.state.transferaddress);\n    }\n  }, {\n    key: \"updateTransferAmountInputValue\",\n    value: function updateTransferAmountInputValue(evt) {\n      console.log('transferamount : ', this.state.transferamount);\n      this.setState({\n        transferamount: evt.target.value\n      });\n    } /////////////////////////////////// TRANSFER END /////////////////////////////\n    /////////////////////////// BURN /////////////////////////////////\n\n  }, {\n    key: \"Burn\",\n    value: function Burn(_to, _amount) {\n      Utils.contract.transfer(_to, _amount).send({\n        shouldPollResponse: true,\n        callValue: 0\n      }).then(function (res) {\n        return Swal({\n          title: 'Burn Successful',\n          type: 'success'\n        });\n      }).catch(function (err) {\n        return Swal({\n          title: 'Burn Failed',\n          type: 'error'\n        });\n      });\n    }\n  }, {\n    key: \"updateBurnAmountInputValue\",\n    value: function updateBurnAmountInputValue(evt) {\n      console.log('burnamount : ', this.state.burnamount);\n      this.setState({\n        burnamount: evt.target.value\n      });\n    } /////////////////////////// BURN END /////////////////////////////////\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (!this.state.tronWeb.installed) return React.createElement(TronLinkGuide, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      });\n      if (!this.state.tronWeb.loggedIn) return React.createElement(TronLinkGuide, {\n        installed: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-lg-12 text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Tron Token Management Platform\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \" Your Address : \", this.state.tronwebaddress, \" \"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \" Paste your contract address here : \"), React.createElement(\"input\", {\n        style: {\n          width: \"400px\"\n        },\n        value: this.state.contractAddress,\n        onChange: this.updateContractAddressInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \" Token name : \", this.state.tokenname), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \" Token Symbol : \", this.state.tokensymbol), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \" Total Supply : \", this.state.totalSupply), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        style: {\n          width: \"400px\"\n        },\n        value: this.state.getbalanceaddress,\n        onChange: this.updateGetBalanceInputValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: function onClick(event) {\n          event.preventDefault();\n\n          _this3.getBalance(_this3.state.getbalanceaddress);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Get Balance\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"Your balance is : \", this.state.balance), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \" To : \"), React.createElement(\"input\", {\n        style: {\n          width: \"400px\"\n        },\n        value: this.state.transferaddress,\n        onChange: this.updateTransferInputValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, \" Amount : \"), React.createElement(\"input\", {\n        style: {\n          width: \"200px\"\n        },\n        value: this.state.transferamount,\n        onChange: this.updateTransferAmountInputValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: function onClick(event) {\n          event.preventDefault();\n\n          _this3.Transfer(_this3.state.transferaddress, _this3.state.transferamount * 100000000);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, \"Transfer\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \" Amount to burn : \"), React.createElement(\"input\", {\n        style: {\n          width: \"200px\"\n        },\n        value: this.state.burnamount,\n        onChange: this.updateBurnAmountInputValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: function onClick(event) {\n          event.preventDefault();\n\n          _this3.Burn(_this3.state.burnamount * 100000000);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, \"Burn\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/src/components/App/index.js"],"names":["React","TronLinkGuide","TronWeb","Utils","Swal","FOUNDATION_ADDRESS","App","props","state","balance","getbalanceaddress","transferaddress","transferamount","contractAddress","tokenname","tokensymbol","tronwebaddress","totalSupply","burnamount","tronWeb","installed","loggedIn","updateGetBalanceInputValue","bind","updateTransferInputValue","updateTransferAmountInputValue","updateContractAddressInput","setState","loading","Promise","resolve","tronWebState","window","ready","tries","timer","setInterval","TRONGRID_API","clearInterval","defaultAddress","hex","address","toHex","base58","on","evt","target","value","console","log","setTronWeb","trx","getAccount","toString","tmp_tronwebaddress","fromHex","contract","name","call","symbol","toNumber","_getbalanceaddress","balanceOf","_to","_amount","transfer","send","shouldPollResponse","callValue","then","res","title","type","catch","err","width","event","preventDefault","getBalance","Transfer","updateBurnAmountInputValue","Burn","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\n\nimport './App.scss';\n\nconst FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            balance: 0,\n            getbalanceaddress: '',\n            transferaddress: '',\n            transferamount: '',\n            contractAddress:'',\n            tokenname:'',\n            tokensymbol:'',\n            tronwebaddress:'',\n            totalSupply:'',\n            burnamount:'',\n\n              tronWeb: {\n                  installed: false,\n                  loggedIn: false\n              },\n            }\n        this.updateGetBalanceInputValue = this.updateGetBalanceInputValue.bind(this)\n        this.updateTransferInputValue = this.updateTransferInputValue.bind(this)\n        this.updateTransferAmountInputValue = this.updateTransferAmountInputValue.bind(this)\n        this.updateContractAddressInput = this.updateContractAddressInput.bind(this)\n\n    }\n\n    async componentDidMount() {\n\n        this.setState({loading:true})\n        await new Promise(resolve => {\n            const tronWebState = {\n                installed: !!window.tronWeb,\n                loggedIn: window.tronWeb && window.tronWeb.ready\n            };\n\n            if(tronWebState.installed) {\n                this.setState({\n                    tronWeb:\n                    tronWebState\n                });\n\n                return resolve();\n            }\n\n            let tries = 0;\n\n            const timer = setInterval(() => {\n                if(tries >= 10) {\n                    const TRONGRID_API = 'https://api.trongrid.io';\n\n                    window.tronWeb = new TronWeb(\n                        TRONGRID_API,\n                        TRONGRID_API,\n                        TRONGRID_API\n                    );\n\n                    this.setState({\n                        tronWeb: {\n                            installed: false,\n                            loggedIn: false\n                        }\n                    });\n\n                    clearInterval(timer);\n                    return resolve();\n                }\n\n                tronWebState.installed = !!window.tronWeb;\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n                if(!tronWebState.installed)\n                    return tries++;\n\n                this.setState({\n                    tronWeb: tronWebState\n                });\n\n                resolve();\n            }, 100);\n        });\n\n        if(!this.state.tronWeb.loggedIn) {\n            // Set default address (foundation address) used for contract calls\n            // Directly overwrites the address object as TronLink disabled the\n            // function call\n            window.tronWeb.defaultAddress = {\n                hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                base58: FOUNDATION_ADDRESS\n            };\n\n            window.tronWeb.on('addressChanged', () => {\n                if(this.state.tronWeb.loggedIn)\n                    return;\n\n                this.setState({\n                    tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                    }\n                });\n            });\n        }\n\n\n        //await Utils.setTronWeb(window.tronWeb);\n        //console.log(Utils.tronWeb.address.fromHex((((await Utils.tronWeb.trx.getAccount()).address).toString())));  /////// Get account address and info\n       // console.log(await Utils.tronWeb.trx.getBalance());\n    }\n\n    ///////////////////////////////// DYNAMIC CONTRACT ADDRESS /////////////////////////\n    async updateContractAddressInput (evt) {\n            await this.setState({\n              contractAddress: evt.target.value\n            });\n            console.log('contractAddress : ', this.state.contractAddress);\n            await Utils.setTronWeb(window.tronWeb, this.state.contractAddress);\n            //const tmp_name = await Utils.contract.name().call();\n            const tmp_tronwebaddress = Utils.tronWeb.address.fromHex((((await Utils.tronWeb.trx.getAccount()).address).toString()))\n            await this.setState({\n              tokenname : await Utils.contract.name().call(),\n              tokensymbol : await Utils.contract.symbol().call(),\n              totalSupply : ((await Utils.contract.totalSupply().call()).toNumber())/100000000,\n              tronwebaddress:tmp_tronwebaddress\n            });\n\n    }\n    ///////////////////////////////// DYNAMIC CONTRACT ADDRESS END /////////////////////////\n\n    /////////////////////////////////////// GET BALANCE /////////////////////////////////\n    async getBalance(_getbalanceaddress){\n        const balance = ((await Utils.contract.balanceOf(_getbalanceaddress).call()).toNumber())/100000000;\n        //const balance = await Utils.contract.decimals().call();\n        console.log('balance', balance);\n\n            this.setState({balance:balance})\n\n    }\n    updateGetBalanceInputValue (evt) {\n        console.log('getbalanceaddress : ', this.state.getbalanceaddress);\n            this.setState({\n              getbalanceaddress: evt.target.value\n            });\n    }\n    /////////////////////////////////////// GET BALANCE END /////////////////////////////////\n\n    /////////////////////////////////// TRANSFER /////////////////////////////\n    Transfer(_to, _amount){\n\n        Utils.contract.transfer(_to, _amount).send({\n            shouldPollResponse: true,\n            callValue: 0\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n\n        }));\n\n    }\n\n    updateTransferInputValue (evt) {\n        this.setState({\n          transferaddress: evt.target.value\n        });\n    console.log('transferaddress : ', this.state.transferaddress);\n\n    }\n\n    updateTransferAmountInputValue (evt) {\n        console.log('transferamount : ', this.state.transferamount);\n            this.setState({\n              transferamount: evt.target.value\n            });\n    }\n    /////////////////////////////////// TRANSFER END /////////////////////////////\n\n    /////////////////////////// BURN /////////////////////////////////\n\n    Burn(_to, _amount){\n\n        Utils.contract.transfer(_to, _amount).send({\n            shouldPollResponse: true,\n            callValue: 0\n        }).then(res => Swal({\n            title:'Burn Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Burn Failed',\n            type: 'error'\n\n        }));\n\n    }\n\n    updateBurnAmountInputValue (evt) {\n        console.log('burnamount : ', this.state.burnamount);\n            this.setState({\n              burnamount: evt.target.value\n            });\n    }\n    /////////////////////////// BURN END /////////////////////////////////\n\n    render() {\n        if(!this.state.tronWeb.installed)\n            return <TronLinkGuide />;\n\n        if(!this.state.tronWeb.loggedIn)\n            return <TronLinkGuide installed />;\n\n        return (\n              <div className='row'>\n                <div className='col-lg-12 text-center' >\n                  <hr/>\n                  <h1>Tron Token Management Platform</h1>\n                  <hr/>\n                  <p> Your Address : {this.state.tronwebaddress} </p>\n                  <br/>\n                  <br/>\n                  <p> Paste your contract address here : </p>\n                  <input style={{ width:\"400px\" }} value={this.state.contractAddress} onChange={this.updateContractAddressInput}/>\n                  <br/>\n                  <p> Token name : {this.state.tokenname}</p>\n                  <p> Token Symbol : {this.state.tokensymbol}</p>\n                  <p> Total Supply : {this.state.totalSupply}</p>\n                  <hr/>\n\n                  <br/>\n                  <br/>\n                  <input style={{ width:\"400px\" }} value={this.state.getbalanceaddress} onChange={this.updateGetBalanceInputValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-primary' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.getBalance(this.state.getbalanceaddress)\n                                                                     }  }>Get Balance\n                  </button>\n                  <br/>\n                  <br/>\n                  <p>Your balance is : {this.state.balance}</p>\n                  <br/>\n                  <hr/>\n                  <p> To : </p>\n                  <input style={{ width:\"400px\" }} value={this.state.transferaddress} onChange={this.updateTransferInputValue}/>\n                  <p> Amount : </p>\n                  <input style={{ width:\"200px\" }} value={this.state.transferamount} onChange={this.updateTransferAmountInputValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-primary' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.Transfer(this.state.transferaddress, this.state.transferamount*100000000)\n                                                                     }  }>Transfer\n                  </button>\n\n                  <hr/>\n                  <p> Amount to burn : </p>\n                  <input style={{ width:\"200px\" }} value={this.state.burnamount} onChange={this.updateBurnAmountInputValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-primary' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.Burn(this.state.burnamount*100000000)\n                                                                     }  }>Burn\n                  </button>\n\n                  <br/>\n                  <br/>\n                </div>\n              </div>\n        );\n    }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}