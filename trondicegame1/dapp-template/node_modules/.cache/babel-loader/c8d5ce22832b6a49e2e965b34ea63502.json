{"ast":null,"code":"import _regeneratorRuntime from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/src/components/App/index.js\";\nimport React from 'react';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\nimport './App.scss';\nvar FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      balance: 0,\n      getbalanceaddress: '',\n      tronWeb: {\n        installed: false,\n        loggedIn: false\n      }\n    };\n    _this.updateInputValue = _this.updateInputValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setState({\n                  loading: true\n                });\n                _context.next = 3;\n                return new Promise(function (resolve) {\n                  var tronWebState = {\n                    installed: !!window.tronWeb,\n                    loggedIn: window.tronWeb && window.tronWeb.ready\n                  };\n\n                  if (tronWebState.installed) {\n                    _this2.setState({\n                      tronWeb: tronWebState\n                    });\n\n                    return resolve();\n                  }\n\n                  var tries = 0;\n                  var timer = setInterval(function () {\n                    if (tries >= 10) {\n                      var TRONGRID_API = 'https://api.trongrid.io';\n                      window.tronWeb = new TronWeb(TRONGRID_API, TRONGRID_API, TRONGRID_API);\n\n                      _this2.setState({\n                        tronWeb: {\n                          installed: false,\n                          loggedIn: false\n                        }\n                      });\n\n                      clearInterval(timer);\n                      return resolve();\n                    }\n\n                    tronWebState.installed = !!window.tronWeb;\n                    tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n                    if (!tronWebState.installed) return tries++;\n\n                    _this2.setState({\n                      tronWeb: tronWebState\n                    });\n\n                    resolve();\n                  }, 100);\n                });\n\n              case 3:\n                if (!this.state.tronWeb.loggedIn) {\n                  // Set default address (foundation address) used for contract calls\n                  // Directly overwrites the address object as TronLink disabled the\n                  // function call\n                  window.tronWeb.defaultAddress = {\n                    hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                    base58: FOUNDATION_ADDRESS\n                  };\n                  window.tronWeb.on('addressChanged', function () {\n                    if (_this2.state.tronWeb.loggedIn) return;\n\n                    _this2.setState({\n                      tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                      }\n                    });\n                  });\n                }\n\n                _context.next = 6;\n                return Utils.setTronWeb(window.tronWeb);\n\n              case 6:\n                _context.t0 = console;\n                _context.t1 = Utils.tronWeb.address;\n                _context.next = 10;\n                return Utils.tronWeb.trx.getAccount();\n\n              case 10:\n                _context.t2 = _context.sent.address.toString();\n                _context.t3 = _context.t1.fromHex.call(_context.t1, _context.t2);\n\n                _context.t0.log.call(_context.t0, _context.t3);\n\n                _context.t4 = console;\n                _context.next = 16;\n                return Utils.tronWeb.trx.getBalance();\n\n              case 16:\n                _context.t5 = _context.sent;\n\n                _context.t4.log.call(_context.t4, _context.t5);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_getbalanceaddress) {\n        var balance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Utils.contract.balanceOf(_getbalanceaddress).call();\n\n              case 2:\n                _context2.t0 = _context2.sent.toNumber();\n                balance = _context2.t0 / 100000000;\n                //const balance = await Utils.contract.decimals().call();\n                console.log('balance', balance);\n                this.setState({\n                  balance: balance\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function getBalance(_x) {\n        return _getBalance.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"Transfer\",\n    value: function Transfer(_to, _amount) {\n      Utils.contract.transfer(_to, _amount).send({\n        shouldPollResponse: true,\n        callValue: 0\n      }).then(function (res) {\n        return Swal({\n          title: 'Vote Casted',\n          type: 'success'\n        });\n      }).catch(function (err) {\n        return Swal({\n          title: 'Vote Failed',\n          type: 'error'\n        });\n      });\n    }\n  }, {\n    key: \"updateInputValue\",\n    value: function updateInputValue(evt) {\n      console.log('getbalanceaddress : ', this.state.getbalanceaddress);\n      this.setState({\n        getbalanceaddress: evt.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (!this.state.tronWeb.installed) return React.createElement(TronLinkGuide, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      });\n      if (!this.state.tronWeb.loggedIn) return React.createElement(TronLinkGuide, {\n        installed: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-lg-12 text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"CodeXpert Coin Management Platform\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        style: {\n          width: \"400px\"\n        },\n        value: this.state.getbalanceaddress,\n        onChange: this.updateInputValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: function onClick(event) {\n          event.preventDefault();\n\n          _this3.getBalance(_this3.state.getbalanceaddress);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Get Balance\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Your balance is : \", this.state.balance), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: function onClick(event) {\n          event.preventDefault();\n\n          _this3.Transfer(100);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Transfer\")));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/krishnakulkarni/Documents/CodeXpert/GIT_test/Tron_TRC20/CodeXpert-Tron-DApp-Template/src/components/App/index.js"],"names":["React","TronLinkGuide","TronWeb","Utils","Swal","FOUNDATION_ADDRESS","App","props","state","balance","getbalanceaddress","tronWeb","installed","loggedIn","updateInputValue","bind","setState","loading","Promise","resolve","tronWebState","window","ready","tries","timer","setInterval","TRONGRID_API","clearInterval","defaultAddress","hex","address","toHex","base58","on","setTronWeb","console","trx","getAccount","toString","fromHex","log","getBalance","_getbalanceaddress","contract","balanceOf","call","toNumber","_to","_amount","transfer","send","shouldPollResponse","callValue","then","res","title","type","catch","err","evt","target","value","width","event","preventDefault","Transfer","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\n\nimport './App.scss';\n\nconst FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            balance: 0,\n            getbalanceaddress: '',\n\n              tronWeb: {\n                  installed: false,\n                  loggedIn: false\n              },\n            }\n        this.updateInputValue = this.updateInputValue.bind(this)\n\n    }\n\n    async componentDidMount() {\n\n        this.setState({loading:true})\n        await new Promise(resolve => {\n            const tronWebState = {\n                installed: !!window.tronWeb,\n                loggedIn: window.tronWeb && window.tronWeb.ready\n            };\n\n            if(tronWebState.installed) {\n                this.setState({\n                    tronWeb:\n                    tronWebState\n                });\n\n                return resolve();\n            }\n\n            let tries = 0;\n\n            const timer = setInterval(() => {\n                if(tries >= 10) {\n                    const TRONGRID_API = 'https://api.trongrid.io';\n\n                    window.tronWeb = new TronWeb(\n                        TRONGRID_API,\n                        TRONGRID_API,\n                        TRONGRID_API\n                    );\n\n                    this.setState({\n                        tronWeb: {\n                            installed: false,\n                            loggedIn: false\n                        }\n                    });\n\n                    clearInterval(timer);\n                    return resolve();\n                }\n\n                tronWebState.installed = !!window.tronWeb;\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n                if(!tronWebState.installed)\n                    return tries++;\n\n                this.setState({\n                    tronWeb: tronWebState\n                });\n\n                resolve();\n            }, 100);\n        });\n\n        if(!this.state.tronWeb.loggedIn) {\n            // Set default address (foundation address) used for contract calls\n            // Directly overwrites the address object as TronLink disabled the\n            // function call\n            window.tronWeb.defaultAddress = {\n                hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                base58: FOUNDATION_ADDRESS\n            };\n\n            window.tronWeb.on('addressChanged', () => {\n                if(this.state.tronWeb.loggedIn)\n                    return;\n\n                this.setState({\n                    tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                    }\n                });\n            });\n        }\n        await Utils.setTronWeb(window.tronWeb);\n        console.log(Utils.tronWeb.address.fromHex((((await Utils.tronWeb.trx.getAccount()).address).toString())));  /////// Get account address and info\n        console.log(await Utils.tronWeb.trx.getBalance());\n    }\n\n    async getBalance(_getbalanceaddress){\n        const balance = ((await Utils.contract.balanceOf(_getbalanceaddress).call()).toNumber())/100000000;\n        //const balance = await Utils.contract.decimals().call();\n        console.log('balance', balance);\n\n            this.setState({balance:balance})\n\n        }\n\n\n    Transfer(_to, _amount){\n\n        Utils.contract.transfer(_to, _amount).send({\n            shouldPollResponse: true,\n            callValue: 0\n        }).then(res => Swal({\n            title:'Vote Casted',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Vote Failed',\n            type: 'error'\n\n        }));\n\n    }\n\n    updateInputValue (evt) {\n    console.log('getbalanceaddress : ', this.state.getbalanceaddress);\n        this.setState({\n          getbalanceaddress: evt.target.value\n        });\n    }\n\n    render() {\n        if(!this.state.tronWeb.installed)\n            return <TronLinkGuide />;\n\n        if(!this.state.tronWeb.loggedIn)\n            return <TronLinkGuide installed />;\n\n        return (\n              <div className='row'>\n                <div className='col-lg-12 text-center' >\n                  <hr/>\n                  <h1>CodeXpert Coin Management Platform</h1>\n                  <hr/>\n                  <br/>\n                  <br/>\n                  <input style={{ width:\"400px\" }} value={this.state.getbalanceaddress} onChange={this.updateInputValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-primary' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.getBalance(this.state.getbalanceaddress)\n                                                                     }  }>Get Balance\n                  </button>\n                  <br/>\n                  <br/>\n                  <p>Your balance is : {this.state.balance}</p>\n                  <br/>\n                  <hr/>\n\n                  <button className='btn btn-primary' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.Transfer(100)\n                                                                     }  }>Transfer\n                  </button>\n                </div>\n              </div>\n        );\n    }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}